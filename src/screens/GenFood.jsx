import React, { useState, useEffect } from 'react';
import { View, Text, Button, ScrollView, StyleSheet, SafeAreaView } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';

import FoodAPI from '../api/FoodAPI';
import UserAPI from '../api/UserAPI';  // Th√™m API ƒë·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng
import { useFocusEffect } from '@react-navigation/native';

const GenFood = () => {
  const [gender, setGender] = useState('');
  const [height, setHeight] = useState('');
  const [weight, setWeight] = useState('');
  const [age, setAge] = useState('');
  const [note, setNote] = useState('');
  const [mealPlan, setMealPlan] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [saving, setSaving] = useState(false); // Tr·∫°ng th√°i l∆∞u

  useFocusEffect(
    React.useCallback(() => {
      const fetchUserData = async () => {
        try {
          const storedUserId = await AsyncStorage.getItem('userId');
          if (storedUserId) {
            const response = await UserAPI.getUserPhysicalStats(storedUserId);

            if (response?.status === 200) {
              const { Gender, Height, Weight, Age, Note } = response?.userPhysicalStats || {};

              setGender(Gender || '');
              setHeight(String(Height) || '');
              setWeight(String(Weight) || '');
              setAge(String(Age) || '');
              setNote(Note || '');
            }
          }
        } catch (error) {
          console.error('L·ªói khi l·∫•y d·ªØ li·ªáu:', error);
        }
      };
      fetchUserData();
    }, [])
  );

  const generateMeal = async () => {
    setLoading(true);
    setMealPlan(null);
    setError('');

    const body = {
      age: age || 25,
      weight: weight ? parseInt(weight, 10) : 70,
      height: height ? parseInt(height, 10) : 175,
      gender: gender || 'male',
      note,
    };

    try {
      const response = {
        "nutritionalNeeds": {
          "description": "Nhu c·∫ßu nƒÉng l∆∞·ª£ng h√†ng ng√†y c·ªßa ng∆∞·ªùi d√πng ph·ª• thu·ªôc v√†o tu·ªïi, c√¢n n·∫∑ng, chi·ªÅu cao, v√† gi·ªõi t√≠nh. V·ªõi chi·ªÅu cao 172 cm, c√¢n n·∫∑ng 50 kg, v√† gi·ªõi t√≠nh n·ªØ, m·ª©c ƒë·ªô ho·∫°t ƒë·ªông sinh ho·∫°t ƒë∆∞·ª£c t√≠nh to√°n l√† trung b√¨nh (BMR + ho·∫°t ƒë·ªông nh·∫π). Kh√¥ng s·ª≠ d·ª•ng ch·∫•t b√©o b√£o h√≤a trong ch·∫ø ƒë·ªô ƒÉn.",
          "totalCalories": "Kho·∫£ng 1,800 kcal m·ªói ng√†y, v·ªõi t·ª∑ l·ªá macronutrients g·ª£i √Ω: 50% Carbs - 25% Protein - 25% Fat."
        },
        "_id": "67bb7f25937e3cbff9233cfb",
        "days": [
          {
            "day": "Day 1",
            "meals": [
              {
                "meal": "Breakfast",
                "description": "- 1 l√°t b√°nh m√¨ ƒëen nguy√™n c√°m (50g) - 120 kcal - 2 th√¨a b∆° h·∫°t h·∫°nh nh√¢n (10g, kh√¥ng d·∫ßu hydrogen h√≥a) - 90 kcal - 1 qu·∫£ tr·ª©ng lu·ªôc - 70 kcal - 1 tr√°i chu·ªëi nh·ªè (~100g) - 90 kcal - 1 ly s·ªØa h·∫°t kh√¥ng ƒë∆∞·ªùng (200ml) - 80 kcal ",
                "calories": 450
              },
              {
                "meal": "Lunch",
                "description": "- 1 b√°t c∆°m g·∫°o l·ª©t nh·ªè (100g) - 110 kcal - 150g th·ªãt ·ª©c g√† √°p ch·∫£o kh√¥ng d·∫ßu - 250 kcal - 200g rau c·∫£i xanh lu·ªôc (b√¥ng c·∫£i, c·∫£i b√≥ x√¥i) - 50 kcal - 1 th√¨a d·∫ßu oliu (cho v√†o rau) - 120 kcal - 1 qu·∫£ cam - 120 kcal ",
                "calories": 650
              },
              {
                "meal": "Dinner",
                "description": "- 1 b√°t ph·ªü cu·ªën v·ªõi b√°nh ph·ªü g·∫°o (120g) - 200 kcal - 120g c√° h·ªìi √°p ch·∫£o, d√πng d·∫ßu oliu thay v√¨ b∆° - 250 kcal - 200g rau x√† l√°ch, c√† chua, v√† d∆∞a leo tr·ªôn d·∫ßu m√® - 100 kcal - 1 ly n∆∞·ªõc √©p t√°o kh√¥ng ƒë∆∞·ªùng (150ml) - 150 kcal --- ",
                "calories": 700
              }
            ]
          },
          {
            "day": "Day 2",
            "meals": [
              {
                "meal": "Breakfast",
                "description": "- 1 b√°t ch√°o y·∫øn m·∫°ch ƒÉn k√®m h·∫°t chia (30g y·∫øn m·∫°ch, 5g h·∫°t chia) - 150 kcal - 1 th√¨a h·∫°t √≥c ch√≥ (7g) - 50 kcal - 1 qu·∫£ t√°o ƒë·ªè (~120g) - 60 kcal - 1 ly s·ªØa h·∫°nh nh√¢n kh√¥ng ƒë∆∞·ªùng (200ml) - 80 kcal - 1 qu·∫£ tr·ª©ng lu·ªôc - 70 kcal ",
                "calories": 450
              },
              {
                "meal": "Lunch",
                "description": "- 1 b√°t c∆°m g·∫°o l·ª©t nh·ªè (100g) - 110 kcal - 150g c√° basa h·∫•p v·ªõi √≠t n∆∞·ªõc chanh - 220 kcal - 200g rau lu·ªôc (c·∫£i th·∫£o, c√† r·ªët) - 50 kcal - 25g qu·∫£ b∆° l√†m topping - 50 kcal - 1 qu·∫£ kiwi - 80 kcal - 1 h≈© s·ªØa chua kh√¥ng ƒë∆∞·ªùng - 140 kcal ",
                "calories": 650
              },
              {
                "meal": "Dinner",
                "description": "- 150g b√∫n g·∫°o l·ª©t v·ªõi n∆∞·ªõc d√πng n·∫•u t·ª´ rau c·ªß - 200 kcal - 120g t√¥m h·∫•p kh√¥ng d·∫ßu - 100 kcal - 200g rau x√† l√°ch tr·ªôn gi·∫•m t√°o v√† d·∫ßu oliu - 150 kcal - 1 b·∫Øp ng√¥ lu·ªôc (~100g) - 100 kcal - 1 ly sinh t·ªë b∆° chu·ªëi kh√¥ng ƒë∆∞·ªùng (200ml) - 150 kcal --- - C√°c b·ªØa ƒÉn ƒë√£ ƒë∆∞·ª£c ph√¢n b·ªï v·ªõi t·ª∑ l·ªá Carbs/Protein/Fats ph√π h·ª£p (50%/25%/25%). - Kh√¥ng s·ª≠ d·ª•ng ch·∫•t b√©o b√£o h√≤a; thay th·∫ø b·∫±ng d·∫ßu oliu/d·∫ßu m√® v√† c√°c ch·∫•t b√©o t·ªët t·ª´ h·∫°t. - Ch·∫ø bi·∫øn c√°c m√≥n ƒÉn ƒë∆°n gi·∫£n b·∫±ng c√°ch lu·ªôc, h·∫•p, √°p ch·∫£o kh√¥ng d·∫ßu ho·∫∑c d√πng d·∫ßu l√†nh m·∫°nh. - U·ªëng ƒë·ªß n∆∞·ªõc (2-2.5 l√≠t m·ªói ng√†y). ",
                "calories": 700
              }
            ]
          }
        ],
        "status": true,
        "createdAt": "2025-02-23T20:03:49.483Z",
        "updatedAt": "2025-02-23T20:03:49.483Z",
        "__v": 0
      };

      setTimeout(() => {
        if (response?.days) {
          setMealPlan(response);
        } else {
          setError('Kh√¥ng th·ªÉ t·∫°o b·ªØa ƒÉn, vui l√≤ng th·ª≠ l·∫°i.');
        }
      }, 5000); 



      // const response = await FoodAPI.genFood(body);
      // console.log(response?.data);


      // if (response?.data && response?.data?.days) {
      //   setMealPlan(response?.data);
      // } else {
      //   setError('Kh√¥ng th·ªÉ t·∫°o b·ªØa ƒÉn, vui l√≤ng th·ª≠ l·∫°i.');
      // }
    } catch (error) {
      console.error('L·ªói API:', error);
      setError('L·ªói khi g·ªçi API.');
    } finally {
      setLoading(false);
    }
  };

  const handleSaveMealPlan = async () => {
    setSaving(true);
    try {
      const userId = await AsyncStorage.getItem('userId');
      if (userId && mealPlan) {
        const response = await FoodAPI.saveMealPlan(userId, mealPlan);
        if (response?.status === 200) {
          alert('L∆∞u l·ªô tr√¨nh ƒÉn th√†nh c√¥ng!');
        } else {
          alert('L·ªói khi l∆∞u l·ªô tr√¨nh ƒÉn.');
        }
      } else {
        alert('L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng.');
      }
    } catch (error) {
      console.error('L·ªói khi l∆∞u l·ªô tr√¨nh ƒÉn:', error);
      alert('C√≥ l·ªói x·∫£y ra khi l∆∞u l·ªô tr√¨nh ƒÉn.');
    } finally {
      setSaving(false);
    }
  };

  const renderMealPlan = () => {
    if (!mealPlan) return null;

    return (
      <View style={styles.mealContainer}>
        <Text style={styles.sectionTitle}>üî• Nhu c·∫ßu dinh d∆∞·ª°ng</Text>
        <Text style={styles.nutritionalDescription}>
          {mealPlan.nutritionalNeeds?.description || ''}
        </Text>
        <Text style={styles.calories}>
          üåü {mealPlan.nutritionalNeeds?.totalCalories || ''}
        </Text>

        <Text style={styles.sectionTitle}>üìÖ Th·ª±c ƒë∆°n theo ng√†y</Text>
        {mealPlan.days.map((day, index) => (
          <View key={index} style={styles.dayContainer}>
            <Text style={styles.dayTitle}>{day.day}</Text>
            {day.meals.map((meal, mealIndex) => (
              <View key={mealIndex} style={styles.mealDetailsContainer}>
                <Text style={styles.mealText}>üçΩ {meal.meal}</Text>
                <Text style={styles.mealDescription}>{meal.description}</Text>
                <Text style={styles.calories}>üåü {meal.calories} kcal</Text>
              </View>
            ))}
          </View>
        ))}


        {saving && <Text style={styles.loading}>ƒêang l∆∞u l·ªô tr√¨nh...</Text>}
      </View>
    );
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>Th√¥ng Tin Ng∆∞·ªùi D√πng</Text>
      <Text style={styles.infoText}>Gi·ªõi t√≠nh: {gender}</Text>
      <Text style={styles.infoText}>Chi·ªÅu cao: {height} cm</Text>
      <Text style={styles.infoText}>C√¢n n·∫∑ng: {weight} kg</Text>
      <Text style={styles.infoText}>Tu·ªïi: {age}</Text>

      <Text style={styles.noteText}>Ghi ch√∫: {note}</Text>
      {!mealPlan && <View style={styles.buttonContainer}>
        <Button
          title="T·∫°o l·ªô tr√¨nh ƒÉn"
          onPress={generateMeal}
          disabled={loading}
          color="#ff6347"
        />
      </View>}


      {/* Only show the save button when meal plan is generated */}
      {!loading && mealPlan && (
        <View style={styles.buttonContainer}>
          <Button
            title="L∆∞u l·ªô tr√¨nh ƒÉn"
            onPress={handleSaveMealPlan}
            disabled={saving}
            color="#2ecc71"
          />
        </View>
      )}


      {loading && <Text style={styles.loading}>ƒêang t·∫°o b·ªØa ƒÉn...</Text>}
      {error ? <Text style={styles.errorText}>{error}</Text> : null}

      {renderMealPlan()}
    </ScrollView>
  );
};


const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#f4f4f4',
    paddingTop: 60,
  },
  title: {
    fontSize: 22,
    fontWeight: 'bold',
    marginBottom: 15,
    color: '#2c3e50',
  },
  infoText: {
    fontSize: 16,
    color: '#34495e',
    marginBottom: 5,
  },
  loading: {
    marginTop: 10,
    fontSize: 16,
    color: 'blue',
  },
  errorText: {
    marginTop: 10,
    fontSize: 14,
    color: 'red',
    textAlign: 'center',
  },
  mealContainer: {
    marginTop: 20,
    padding: 15,
    backgroundColor: '#fff',
    borderRadius: 8,
    shadowColor: '#000',
    shadowOpacity: 0.1,
    shadowRadius: 8,
    shadowOffset: { width: 0, height: 4 },
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginTop: 10,
    color: '#e74c3c',
  },
  nutritionalDescription: {
    fontSize: 16,
    marginTop: 5,
    color: '#7f8c8d',
  },
  calories: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#27ae60',
    marginTop: 5,
  },
  dayContainer: {
    marginTop: 15,
    padding: 10,
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 8,
    backgroundColor: '#ecf0f1',
  },
  dayTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#2980b9',
  },
  mealDetailsContainer: {
    marginTop: 8,
    paddingLeft: 10,
  },
  mealText: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#8e44ad',
  },
  mealDescription: {
    fontSize: 14,
    color: '#34495e',
    marginTop: 5,
  },
  buttonContainer: {
    marginTop: 5,
    marginBottom: 10,
  },
  noteText: {
    fontSize: 16,
    color: '#7f8c8d',
    marginVertical: 5,
    fontStyle: 'italic',
  },
});

export default GenFood;
